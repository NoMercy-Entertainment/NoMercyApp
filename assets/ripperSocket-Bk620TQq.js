import{H as R}from"./HubConnection-CMQnVIkW.js";import{B as C,l as w,ae as b,R as v,cN as E,cO as T,w as D}from"./index-C_qNKMWs.js";const n=w(),x=C(()=>{var e;return(e=n.value)==null?void 0:e.connection}),f=w(!1);function d(){var e,c;f.value=!0,document.dispatchEvent(new Event("ripperHub-connected")),(e=n.value)!=null&&e.connection&&T((c=n.value)==null?void 0:c.connection)}function s(e){f.value=!1,console.log("Disconnected from Ripper SignalR",e),document.dispatchEvent(new Event("ripperHub-disconnected"))}function H(e){f.value=!1,console.error("Ripper SignalR Error:",e),document.dispatchEvent(new Event("ripperHub-error"))}D(v,async e=>{var o,t,a,i,r,u,l,p;const c=(o=b.value)==null?void 0:o.accessToken;e&&f.value&&((a=(t=n.value)==null?void 0:t.connection)==null||a.stop().then(),(i=n.value)==null||i.dispose(),n.value=new E(v.value.serverBaseUrl,c,"ripperHub"),(u=(r=n.value)==null?void 0:r.connection)==null||u.on("connected",d),(p=(l=n.value)==null?void 0:l.connection)==null||p.on("disconnected",s),await y().catch(H))});async function y(){var e,c,o,t;if(((c=(e=n.value)==null?void 0:e.connection)==null?void 0:c.state)!==R.Connected)return(t=(o=n.value)==null?void 0:o.connection)==null?void 0:t.start().then(d)}async function I(){var e,c,o,t;try{return((c=(e=n.value)==null?void 0:e.connection)==null?void 0:c.state)===R.Disconnected||(t=(o=n.value)==null?void 0:o.connection)==null?void 0:t.stop().then(s).catch(s)}catch(a){console.error("Error stopping Ripper SignalR:",a),s()}}async function N(){var c,o,t,a,i,r,u,l,p,g,h,k,m;const e=(c=b.value)==null?void 0:c.accessToken;v.value&&(!((t=(o=n.value)==null?void 0:o.connection)!=null&&t.state)||((i=(a=n.value)==null?void 0:a.connection)==null?void 0:i.state)===R.Disconnected)&&(n.value=new E(v.value.serverBaseUrl,e,"ripperHub"),(u=(r=n.value)==null?void 0:r.connection)==null||u.on("connected",d),(p=(l=n.value)==null?void 0:l.connection)==null||p.on("disconnected",s),await y().catch(H),(h=(g=n.value)==null?void 0:g.connection)==null||h.onreconnecting(S=>{console.log("SignalR Disconnected.",S==null?void 0:S.message),s()}),(m=(k=n.value)==null?void 0:k.connection)==null||m.onreconnected(()=>{console.log("SignalR Reconnected."),d()}))}export{N as a,f as b,x as r,I as s};
