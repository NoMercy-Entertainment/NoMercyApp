{"version":3,"file":"useApiClient-DYQzompT.js","sources":["../../src/lib/clients/useApiClient.ts"],"sourcesContent":["import { ComputedRef, Ref, ref, toRaw, UnwrapRef } from 'vue';\nimport { QueryKey, useQuery, UseQueryReturnType } from '@tanstack/vue-query';\n\nimport apiClient from './apiClient';\nimport { AxiosError } from 'axios';\nimport { ErrorResponse } from '@/types/server';\nimport { queryKey } from '@/lib/clients/useInfiniteServerClient';\nimport router from '@/router';\n\nexport interface ServerClientProps {\n\tpath?: string;\n\tdata?: any;\n\tparams?: any;\n\tcacheKey?: string;\n\tkeepForever?: boolean;\n\tenabled?: Ref<boolean> | ComputedRef<boolean> | boolean;\n\trefetchInterval?: number;\n\tdelay?: number;\n\tqueryKey?: QueryKey | unknown[];\n\ttype?: 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n\tsuspense?: Ref<UnwrapRef<boolean>>\n\tlimit?: number;\n}\n\ntype Return<T> = UseQueryReturnType<T, AxiosError<ErrorResponse>> extends {\n\tsetLetter: (value: string) => void;\n} ? UseQueryReturnType<T, AxiosError<ErrorResponse>> : UseQueryReturnType<T, AxiosError<ErrorResponse>> & {\n\tsetLetter: (value: string) => void;\n};\n\nconst useApiClient = <T,>(options?: ServerClientProps): Return<T> => {\n\n\tconst letter = ref<string>(router.currentRoute.value.params?.letter as string || '_');\n\n\tconst setLetter = (value: string) => {\n\t\tletter.value = value;\n\t\t// queryClient.refetch();\n\t};\n\n\trouter.afterEach(() => {\n\t\tsetLetter(router.currentRoute.value.params.letter as string);\n\t});\n\n\tconst getDataValues = () => {\n\t\treturn Object.keys(options?.data ?? {})\n\t\t\t.reduce((acc, key) => {\n\t\t\t\tacc[key] = toRaw(options?.data![key].value);\n\t\t\t\treturn acc;\n\t\t\t}, {} as Record<string | number, any>);\n\t}\n\n\tconst type = ref<'get' | 'post' | 'put' | 'patch' | 'delete' | 'head'>(options?.type ?? 'get');\n\n\tconst useQueryC = useQuery({\n\t\t...options,\n\t\tqueryKey: queryKey(options),\n\t\t// enabled: !!currentServer.value?.id && options?.enabled,\n\t\tenabled: true,\n\t\tretry: 0,\n\t\t// initialData: () => {\n\t\t// \tget(queryKey(options) as IDBKeyRange | IDBValidKey)\n\t\t// \t\t.then(value => {\n\t\t// \t\t\tqueryClient.setQueryData(queryKey(options),value);\n\t\t// \t\t});\n\t\t// \treturn {\n\t\t// \t}\n\t\t// },\n\t\trefetchOnMount: true,\n\t\trefetchOnWindowFocus: false,\n\t\tnetworkMode: 'offlineFirst',\n\t\tstaleTime: options?.keepForever\n\t\t\t? Infinity\n\t\t\t: 1000 * 60 * 5,\n\t\tqueryFn: () => {\n\t\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\t\tconst controller = new AbortController();\n\n\t\t\t\tsetTimeout(() => {\n\n\t\t\t\t\tlet promise;\n\n\t\t\t\t\tif ((options?.path ?? router.currentRoute.value.fullPath).includes('undefined')) return Promise.reject();\n\n\t\t\t\t\tif (type.value == 'get') {\n\t\t\t\t\t\tpromise = apiClient<T>()\n\t\t\t\t\t\t\t.get<T>(\n\t\t\t\t\t\t\t\toptions?.path ?? router.currentRoute.value.fullPath,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\t\t\t\tletter: letter.value,\n\t\t\t\t\t\t\t\t\t\t...options?.params,\n\t\t\t\t\t\t\t\t\t\t...getDataValues(),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\treturn response.data?.data ?? response.data;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(reject);\n\n\t\t\t\t\t}\n\t\t\t\t\telse if (type.value == 'post') {\n\n\t\t\t\t\t\tpromise = apiClient<T>()\n\t\t\t\t\t\t\t.post<T>(options?.path ?? router.currentRoute.value.fullPath,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tletter: router.currentRoute.value.params.letter ?? undefined,\n\t\t\t\t\t\t\t\t\t...options?.data,\n\t\t\t\t\t\t\t\t\t...getDataValues(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(({ data }) => {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\treturn data?.data ?? data;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(reject);\n\n\t\t\t\t\t}\n\t\t\t\t\telse if (type.value == 'put') {\n\t\t\t\t\t\tpromise = apiClient<T>()\n\t\t\t\t\t\t\t.put<T>(options?.path ?? router.currentRoute.value.fullPath,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tletter: router.currentRoute.value.params.letter ?? undefined,\n\t\t\t\t\t\t\t\t\t...options?.data,\n\t\t\t\t\t\t\t\t\t...getDataValues(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(({ data }) => {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\treturn data?.data ?? data;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\t\t\t\t\telse if (type.value == 'patch') {\n\t\t\t\t\t\tpromise = apiClient<T>()\n\t\t\t\t\t\t\t.patch<T>(options?.path ?? router.currentRoute.value.fullPath,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tletter: router.currentRoute.value.params.letter ?? undefined,\n\t\t\t\t\t\t\t\t\t...options?.data,\n\t\t\t\t\t\t\t\t\t...getDataValues(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(({ data }) => {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\treturn data?.data ?? data;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\t\t\t\t\telse if (type.value == 'delete') {\n\t\t\t\t\t\tpromise = apiClient<T>()\n\t\t\t\t\t\t\t.delete<T>(options?.path ?? router.currentRoute.value.fullPath,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tletter: router.currentRoute.value.params.letter ?? undefined,\n\t\t\t\t\t\t\t\t\t...options?.data,\n\t\t\t\t\t\t\t\t\t...getDataValues(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(({ data }) => {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\treturn data?.data ?? data;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\n\t\t\t\t\t// promise!.then(async (value) => {\n\t\t\t\t\t// \tawait set(queryKey(options) as IDBKeyRange | IDBValidKey, value);\n\t\t\t\t\t// });\n\n\t\t\t\t\treturn resolve(promise as Promise<T>);\n\n\t\t\t\t}, options?.delay ?? 0);\n\t\t\t});\n\t\t},\n\t}) as UseQueryReturnType<T, AxiosError<ErrorResponse>>;\n\n\treturn {\n\t\t...useQueryC,\n\t\tsetLetter,\n\t};\n\n};\n\nexport default useApiClient;\n"],"names":["useApiClient","options","letter","ref","_a","router","setLetter","value","getDataValues","acc","key","toRaw","type","useQuery","queryKey","resolve","reject","controller","promise","apiClient","response","data"],"mappings":"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"}