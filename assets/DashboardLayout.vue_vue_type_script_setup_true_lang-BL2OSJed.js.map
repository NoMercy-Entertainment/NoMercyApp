{"version":3,"file":"DashboardLayout.vue_vue_type_script_setup_true_lang-BL2OSJed.js","sources":["../../node_modules/@microsoft/signalr/src/HubConnection.ts","../../src/lib/clients/dashboardSocket.ts","../../src/hooks/useMounted.ts","../../src/components/Buttons/HelpButton.vue","../../src/Layout/Desktop/DashboardLayout.vue"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { CancelInvocationMessage, CloseMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100_000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private readonly _statefulReconnectBufferSize: number;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: (((...args: any[]) => void) | ((...args: any[]) => any))[] };\r\n    private _invocationId: number;\r\n    private _messageBuffer?: MessageBuffer;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy,\r\n            serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n\r\n    private constructor(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds ?? DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds ?? DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize ?? DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    private async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        } catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        } else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => any): void\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message)\r\n                            .catch((e) => {\r\n                                this._logger.log(LogLevel.Error, `Invoke client method threw error: ${getErrorString(e)}`)\r\n                            });\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private async _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            } catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `${exception}`, null);\r\n            } else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, null, res);\r\n            } else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error ?? new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error((e as any).toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n\r\n    private _createCloseMessage(): CloseMessage {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n","import {computed, type Ref, ref, watch} from 'vue';\nimport {HubConnectionState} from '@microsoft/signalr/src/HubConnection';\n\nimport SocketClient from '@/lib/clients/socketClient/SocketClient';\nimport {connect, onConnect, onDisconnect} from '@/lib/clients/socketClient/events';\nimport {currentServer} from '@/store/currentServer';\nimport {user} from '@/store/user';\n\nconst socket: Ref<SocketClient| undefined> = ref();\nexport const connection = computed(() => socket.value?.connection);\nexport const dashboardSocketIsConnected = ref(false);\n\nconst connected = () => {\n\tdashboardSocketIsConnected.value = true;\n\tconsole.log('Connected to Dashboard SignalR');\n\tdocument.dispatchEvent(new Event('dashboardHub-connected'));\n\n\tif (socket.value?.connection) {\n\t\tonConnect(socket.value?.connection);\n\t\tconnect(socket.value?.connection);\n\t}\n};\n\nconst disconnected = (err?: Event|void) => {\n\tdashboardSocketIsConnected.value = false;\n\tconsole.log('Disconnected from Dashboard SignalR', err);\n\tdocument.dispatchEvent(new Event('dashboardHub-disconnected'));\n};\n\nconst error = (err: Error) => {\n\tdashboardSocketIsConnected.value = false;\n\tconsole.error('Dashboard SignalR Error:', err);\n\tdocument.dispatchEvent(new Event('dashboardHub-error'));\n}\n\nwatch(currentServer, async (newServer) => {\n\tconst accessToken = user.value?.accessToken;\n\n\tif (newServer && dashboardSocketIsConnected.value) {\n\t\tsocket.value?.connection?.stop().then();\n\t\tsocket.value = new SocketClient(currentServer.value!.serverBaseUrl!, accessToken, 'dashboardHub');\n\n\t\tsocket.value?.connection?.on('connected', connected);\n\t\tsocket.value?.connection?.on('disconnected', disconnected);\n\n\t\tawait connectToHub()\n\t\t\t.catch(error);\n\t}\n});\n\nconst connectToHub = async () => {\n\tif (socket.value?.connection?.state === HubConnectionState.Connected) return;\n\n\treturn socket.value?.connection?.start()\n\t\t.then(connected);\n};\n\nexport const stopDashboardSocket = async () => {\n\ttry {\n\t\tif (socket.value?.connection?.state === HubConnectionState.Disconnected) return;\n\n\t\treturn socket.value?.connection?.stop()\n\t\t\t.then(disconnected)\n\t\t\t.catch(disconnected);\n\n\t} catch (err) {\n\t\tconsole.error('Error stopping Dashboard SignalR:', err);\n\t\tdisconnected();\n\t}\n}\n\nexport const startDashboardSocket = async () => {\n\tconst accessToken = user.value?.accessToken;\n\n\tif (currentServer.value && (!socket.value?.connection?.state || socket.value?.connection?.state === HubConnectionState.Disconnected)) {\n\t\tsocket.value = new SocketClient(currentServer.value.serverBaseUrl, accessToken, 'dashboardHub');\n\n\t\tsocket.value?.connection?.on('connected', connected);\n\t\tsocket.value?.connection?.on('disconnected', disconnected);\n\n\t\tawait connectToHub()\n\t\t\t.catch(error);\n\n\t\tsocket.value?.connection?.onreconnecting((error: Error | undefined) => {\n\t\t\tconsole.log('SignalR Disconnected.', error?.message);\n\t\t\tonDisconnect(socket.value?.connection);\n\t\t\tdisconnected();\n\t\t});\n\t\tsocket.value?.connection?.onreconnected(() => {\n\t\t\tconsole.log('SignalR Reconnected.');\n\t\t\tonConnect(socket.value?.connection);\n\t\t\tconnected();\n\t\t});\n\t}\n}\n","import {onUnmounted, onMounted, ref, toRaw} from 'vue';\n\nconst keepAlive = ref<{\n\tmount: () => void;\n\tunmount: () => void\n\ttimeout: NodeJS.Timeout | null;\n}[]>([]);\n\nconst useMounted = (onMount: () => void, onUnmount: () => void, duration = 0) => {\n\tonMounted(() => {\n\t\tconst last = keepAlive.value\n\t\t\t.find((fn) => fn.mount == onMount);\n\n\t\tif (last?.timeout) {\n\t\t\tclearTimeout(last.timeout);\n\t\t\tlast.timeout = null;\n\t\t}\n\n\t\tif (last?.mount == onMount) return;\n\t\tonMount();\n\n\t\tkeepAlive.value = [\n\t\t\t...toRaw(keepAlive.value),\n\t\t\t{\n\t\t\t\tmount: onMount,\n\t\t\t\tunmount: onUnmount,\n\t\t\t\ttimeout: null\n\t\t\t}\n\t\t];\n\t});\n\n\tonUnmounted(() => {\n\t\tif (keepAlive.value.length === 0) {\n\t\t\tonUnmount();\n\t\t\treturn;\n\t\t}\n\n\t\tconst last = keepAlive.value\n\t\t\t.find((fn) => fn.mount == onMount);\n\n\t\tif (!last) {\n\t\t\tonUnmount();\n\t\t\treturn;\n\t\t}\n\n\t\tlast.timeout = setTimeout(() => {\n\t\t\tonUnmount();\n\n\t\t\tkeepAlive.value = keepAlive.value\n\t\t\t\t.filter((fn) => fn.mount != onMount)\n\t\t\t\t.map((fn) => toRaw(fn));\n\n\t\t}, duration * 1000);\n\t});\n}\n\nexport default useMounted;\n","<script setup lang=\"ts\">\n\nimport {suffix} from '@/config/config';\n\nimport Button from '@/components/Buttons/Button.vue';\n\nimport {useRoute} from 'vue-router';\nimport {computed} from 'vue';\n\nconst route = useRoute();\n\nconst url = computed(() => `https://docs${suffix}.nomercy.tv${\n  route.path.replace(/\\/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/gu, '')\n}`);\n\n</script>\n\n<template>\n\t<Button\n\t\tid=\"help\"\n\t\t:href=\"url\"\n\t\tvariant=\"text\"\n\t\tcomponent=\"link\"\n    target=\"_blank\"\n\t\tcolor=\"auto\"\n\t\tstartIcon=\"messageBubbleQuestion\"\n\t\tclass=\"relative flex h-10 flex-shrink-0 flex-grow-0 items-center justify-center gap-2 overflow-hidden rounded-lg px-4 py-2.5\"\n\t>\n\t\t{{ $t('Help') }}\n\t</Button>\n</template>\n","<script setup lang=\"ts\">\nimport {computed, onMounted, type PropType, watch} from 'vue';\nimport {type AxiosError} from 'axios';\n\nimport {ErrorResponse} from '@/types/server';\n\nimport {dashboardBigCardGrid, dashboardCardGrid, dashboardColumnGrid} from '@/config/global';\nimport useMounted from '@/hooks/useMounted';\nimport useServerClient from '@/lib/clients/useServerClient';\nimport {dashboardSocketIsConnected, startDashboardSocket, stopDashboardSocket} from '@/lib/clients/dashboardSocket';\nimport {setColorPalette} from '@/store/ui';\n\nimport FloatingBackButton from '@/components/Buttons/FloatingBackButton.vue';\nimport HelpButton from '@/components/Buttons/HelpButton.vue';\nimport ScrollContainer from '@/Layout/Desktop/components/ScrollContainer.vue';\n\nconst addModalOpen = defineModel({\n  required: false,\n  type: Boolean,\n});\n\nconst props = defineProps({\n  title: {\n    type: String,\n    required: true,\n  },\n  params: {\n    type: Object,\n    required: false,\n  },\n  description: {\n    type: String,\n    required: false,\n  },\n  gridStyle: {\n    type: Number,\n    required: false,\n    default: 0,\n  },\n  back: {\n    type: Boolean,\n    required: false,\n    default: false,\n  },\n  error: {\n    type: Object as PropType<AxiosError<unknown, any> | null>,\n    required: false,\n  },\n  allowAnyone: {\n    type: Boolean,\n    required: false,\n    default: false,\n  },\n});\n\nconst {dataUpdatedAt, error: permissionsError, isPending} = useServerClient({\n  path: 'dashboard/server',\n  enabled: !props.allowAnyone,\n  refetchInterval: 10000,\n  queryKey: ['dashboard', 'server', dashboardSocketIsConnected.value],\n});\n\nconst grid = computed(() => {\n  if (props.gridStyle == 1) {\n    return dashboardCardGrid.value;\n  } else if (props.gridStyle == 2) {\n    return dashboardColumnGrid.value;\n  } else if (props.gridStyle == 3) {\n    return dashboardBigCardGrid.value;\n  } else {\n    return 'flex flex-wrap';\n  }\n});\n\nconst accessError = computed(() => {\n  if (props.allowAnyone) return null;\n  const err = permissionsError.value as AxiosError<ErrorResponse, any> | null;\n\n  if (err?.response?.status == 200) return;\n\n  return {\n    code: err?.response?.data?.status ?? null,\n    message: err?.response?.data?.detail ?? ''\n  };\n});\n\nconst error = computed(() => {\n  const err = props.error as AxiosError<ErrorResponse, any> | null;\n  console.log(err);\n\n  if (!err?.response || err?.response?.status == 200) return;\n\n  return {\n    code: err?.response?.status,\n    message: err?.response?.data?.detail ?? ''\n  };\n});\n\nonMounted(() => {\n  setColorPalette(null);\n});\n\nuseMounted(startDashboardSocket, stopDashboardSocket, 1);\n\nconst showError = computed(() => {\n  return (accessError.value?.code || isPending.value || !dashboardSocketIsConnected.value) && !props.allowAnyone;\n});\n\nwatch(showError, (value) => {\n  if (value && addModalOpen.value != undefined) {\n    addModalOpen.value = false;\n  }\n});\n\nwatch(dataUpdatedAt, (value) => {\n  if (value && !dashboardSocketIsConnected.value) {\n    startDashboardSocket();\n  }\n});\n\n</script>\n\n<template>\n  <KeepAlive>\n    <div v-if=\"showError\" class=\"grid h-full w-full place-items-center\">\n      <div class=\"relative flex items-center justify-start gap-8 overflow-hidden\">\n        <div class=\"relative flex w-full flex-col gap-4\">\n          <p class=\"text-7xl font-bold text-center text-slate-light-12/80 dark:text-slate-dark-12/80\">\n            {{ accessError?.code ? accessError?.code : 'Offline' }}\n          </p>\n          <p class=\"left-0 text-2xl text-center text-slate-light-12/80 dark:text-slate-dark-12/80 whitespace-pre-line\">\n            {{ (accessError as any)?.message }}\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <div v-else\n         class=\"relative z-0 h-available flex flex-shrink-0 flex-grow flex-col overflow-clip items-start justify-start self-stretch w-available min-h-available bg-slate-light-3 dark:bg-slate-dark-2\">\n      <div\n          class=\"sticky top-0 z-10 flex flex-shrink-0 flex-grow-0 flex-col items-start justify-start gap-5 self-stretch\"\n      >\n        <div class=\"absolute inset-0 z-0 h-full w-full\"></div>\n        <!--\t\t\t<Shadow type=\"linear\"/>-->\n        <div\n            class=\"z-10 flex h-20 items-center justify-between gap-4 self-stretch border-b px-4 py-4 border-auto-7/6 xl:px-6 bg-slate-light-3 dark:bg-slate-dark-2\"\n        >\n          <div class=\"relative flex h-full flex-col items-start justify-center gap-1 text-slate-light-12/80 dark:text-slate-dark-12/80\">\n            <p\n                class=\"w-auto flex-shrink-0 flex-grow-0 self-stretch whitespace-nowrap text-xl font-semibold\"\n            >\n              {{ $t(title, params) }}\n            </p>\n            <FloatingBackButton v-if=\"back\" position=\"relative\" class=\"left-4\"/>\n            <p v-else\n               class=\"hidden h-8 w-auto flex-shrink-0 flex-grow-0 items-center self-stretch text-sm empty:hidden lg:flex\"\n            >\n              {{ $t(description) }}\n            </p>\n          </div>\n\n          <slot name=\"title\"/>\n          <div class=\"flex flex-col flex-nowrap items-end justify-center gap-x-3 gap-y-1 sm:flex-row\">\n            <HelpButton/>\n            <slot name=\"cta\"/>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"error\" class=\"grid h-full w-full place-items-center\">\n        <div class=\"relative flex flex-col items-center justify-start gap-8 overflow-hidden\">\n          <div class=\"relative flex w-full flex-col gap-4\">\n            <p class=\"text-7xl font-bold text-center text-slate-light-12/80 dark:text-slate-dark-12/80\">\n              {{ error.code }}\n            </p>\n            <p class=\"left-0 text-2xl text-center text-slate-light-12/80 dark:text-slate-dark-12/80 whitespace-pre-line\">\n              {{ error.message }}\n            </p>\n          </div>\n        </div>\n      </div>\n      <ScrollContainer v-else :static=\"true\" class=\"z-0 flex !h-sidebar+ !min-h-[calc(100vh-16rem)] w-full flex-1 overflow-y-auto overflow-x-hidden sm:p-4\">\n        <div class=\"h-auto w-full flex-wrap content-start gap-4\" :class=\"grid\">\n          <slot/>\n        </div>\n      </ScrollContainer>\n\n      <div v-if=\"!error && $slots.actions\"\n           class=\"sticky bottom-0 z-0 flex w-full flex-wrap items-center gap-4 border-t px-4 py-4 border-auto-7/6 empty:hidden sm:h-16 xl:px-6\"\n      >\n        <div class=\"absolute inset-0 -z-10 h-full w-full\"></div>\n        <slot name=\"actions\"/>\n      </div>\n\n    </div>\n  </KeepAlive>\n</template>\n"],"names":["ref","computed","watch","user","SocketClient","currentServer","onDisconnect","onConnect","connect","onMounted","toRaw","onUnmounted","defineComponent","useRoute","suffix","openBlock","createBlock","withCtx","createTextVNode","toDisplayString","mergeModels","useModel","useServerClient","setColorPalette","createElementBlock","createBaseVNode","renderSlot","createVNode","_sfc_main$4","createCommentVNode","KeepAlive","dashboardCardGrid","dashboardColumnGrid","dashboardBigCardGrid","normalizeClass","_sfc_main$3","_sfc_main$2","HubConnectionState","socket","connection","_a","dashboardSocketIsConnected","connected","_b","_c","disconnected","err","error","newServer","_d","_e","_f","_g","accessToken","connectToHub","stopDashboardSocket","startDashboardSocket","_h","_i","_j","_k","_l","_m","keepAlive","useMounted","onMount","onUnmount","duration","last","fn","route","url","addModalOpen","_useModel","__props","props","dataUpdatedAt","permissionsError","isPending","grid","accessError","showError","value"],"mappings":"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","x_google_ignoreList":[0]}