{"version":3,"file":"Desktop-Dt5vBSHh.js","sources":["../../src/lib/OfflineContentManager/useDownloadManager.ts","../../src/views/Dev/Download/Desktop.vue"],"sourcesContent":["import { ref } from 'vue';\nimport { PlaylistItem as BasePlaylistItem } from '@/lib/VideoPlayer';\nimport {Track} from \"@nomercy-entertainment/nomercy-video-player/dist/types\";\nimport serverClient from '@/lib/clients/serverClient';\nimport { currentServer } from '@/store/currentServer';\nimport { user } from '@/store/user';\nimport { pad } from '@/lib/stringArray';\n\nexport interface PlaylistItem extends BasePlaylistItem {\n    duration: string;\n    favorite: boolean;\n    date: string;\n    video_id: string;\n    tracks: Track[];\n}\n\ntype MediaType = 'video' | 'music';\n\ninterface DownloadItemProgress {\n    id: string;\n    title: string;\n    image: string;\n    progress: number;\n    status: 'pending' | 'downloading' | 'completed' | 'error' | 'paused' | 'waiting';\n    children: {\n        type: 'video' | 'subtitle' | 'preview' | 'font' | 'audio';\n        name: string;\n        progress: number;\n        status: 'pending' | 'downloading' | 'completed' | 'error' | 'paused' | 'waiting';\n    }[];\n}\n\nexport function useDownloadManager() {\n    const isDownloading = ref(false);\n    const progress = ref(0);\n    const completedItems = ref(0);\n    const totalItems = ref(0);\n    const itemProgress = ref(0);\n    const downloadQueue = ref<DownloadItemProgress[]>([]);\n    const isPaused = ref(false);\n    let worker: Worker | null = null;\n\n    function updateCompletedItems() {\n        completedItems.value = downloadQueue.value.filter(item => item.status === 'completed').length;\n    }\n\n    function pauseDownloads() {\n        if (!isPaused.value) {\n            worker?.postMessage({ controls: { type: 'pause' } });\n            // Only update non-completed items\n            downloadQueue.value.forEach(item => {\n                if (item.status !== 'completed') {\n                    item.status = 'paused';\n                    item.children.forEach(child => {\n                        if (child.status !== 'completed') {\n                            child.status = 'paused';\n                        }\n                    });\n                }\n            });\n            isPaused.value = true;\n        }\n    }\n\n    function resumeDownloads() {\n        if (isPaused.value) {\n            // Only find items that are currently paused (not completed)\n            const pausedItems = downloadQueue.value.filter(item => item.status === 'paused');\n            if (pausedItems.length > 0) {\n                // Mark first item as pending, rest as waiting\n                pausedItems[0].status = 'pending';\n                pausedItems[0].children.forEach(child => {\n                    if (child.status === 'paused') child.status = 'pending';\n                });\n                \n                // Mark rest as waiting\n                pausedItems.slice(1).forEach(item => {\n                    item.status = 'waiting';\n                    item.children.forEach(child => {\n                        if (child.status === 'paused') child.status = 'waiting';\n                    });\n                });\n\n                worker?.postMessage({ \n                    controls: { \n                        type: 'resume',\n                        pausedIds: pausedItems.map(item => item.id)\n                    }\n                });\n            }\n            isPaused.value = false;\n        }\n    }\n\n    function pauseItem(itemId: string) {\n        const item = downloadQueue.value.find(i => i.id === itemId);\n        if (item && (item.status === 'downloading' || item.status === 'pending' || item.status === 'waiting')) {\n            worker?.postMessage({ controls: { type: 'pauseItem', itemId } });\n            // Update UI immediately for better responsiveness\n            item.status = 'paused';\n            item.children.forEach(child => {\n                if (child.status === 'downloading' || child.status === 'pending' || child.status === 'waiting') {\n                    child.status = 'paused';\n                }\n            });\n\n            // Check if all non-completed items are now paused\n            const allPaused = downloadQueue.value.every(i => \n                i.status === 'completed' || i.status === 'paused'\n            );\n            \n            if (allPaused) {\n                isPaused.value = true;\n            }\n        }\n    }\n\n    function resumeItem(itemId: string) {\n        const item = downloadQueue.value.find(i => i.id === itemId);\n        if (item && item.status === 'paused') {\n            worker?.postMessage({ controls: { type: 'resumeItem', itemId } });\n            // Update UI immediately for better responsiveness\n            const activeItem = downloadQueue.value.find(i => i.status === 'downloading' || i.status === 'pending');\n            if (activeItem) {\n                item.status = 'waiting';\n                item.children.forEach(child => {\n                    if (child.status === 'paused') {\n                        child.status = 'waiting';\n                    }\n                });\n            } else {\n                item.status = 'pending';\n                item.children.forEach(child => {\n                    if (child.status === 'paused') {\n                        child.status = 'pending';\n                    }\n                });\n            }\n\n            // If any item is now active, clear the global pause state\n            const anyActive = downloadQueue.value.some(i => \n                i.status === 'downloading' || i.status === 'pending'\n            );\n            \n            if (anyActive) {\n                isPaused.value = false;\n            }\n        }\n    }\n\n    function prioritizeItem(itemId: string) {\n        worker?.postMessage({ controls: { action: 'prioritize', itemId } });\n    }\n\n    async function downloadPlaylist(type: MediaType, item: string) {\n        isDownloading.value = true;\n\n        try {\n            const { data: playlist } = await serverClient()\n                .get<PlaylistItem[]>(`/${item}/watch`);\n\n            // Only reset progress if this is a new query (different playlist)\n            const newItems = playlist\n                .filter(item => !!item?.file)\n                .map(item => item.video_id);\n            \n            const currentItems = downloadQueue.value.map(item => item.id);\n            const isNewQuery = newItems.some(id => !currentItems.includes(id)) || \n                             currentItems.some(id => !newItems.includes(id));\n\n            if (isNewQuery) {\n                // Reset everything for a new query\n                progress.value = 0;\n                completedItems.value = 0;\n                downloadQueue.value = [];\n            } else {\n                // Keep existing progress, only update non-completed items\n                downloadQueue.value = downloadQueue.value.filter(item => item.status === 'completed');\n            }\n\n            // Initialize download queue with new/remaining items\n            downloadQueue.value = await Promise.all(playlist\n                .filter(item => !!item?.file)\n                .map(async (episode, index) => {\n                    // Check which assets actually exist\n                    const hasSubtitles = episode.tracks?.some(t => t.kind === 'subtitles' && t.file);\n                    const hasFonts = episode.tracks?.some(t => t.kind === 'fonts' && t.file);\n                    const hasPreviews = episode.tracks?.some(t => ['thumbnails', 'sprite'].includes(t.kind) && t.file);\n\n                    // Check master playlist for audio tracks only if it's an HLS stream\n                    let hasAudio = false;\n                    if (episode.file.endsWith('.m3u8')) {\n                        try {\n                            const response = await fetch(`${currentServer.value?.serverBaseUrl}${episode.file}`, {\n                                headers: {\n                                    'Authorization': `Bearer ${user.value?.accessToken}`\n                                }\n                            });\n                            const masterPlaylist = await response.text();\n                            hasAudio = masterPlaylist.includes('#EXT-X-MEDIA:TYPE=AUDIO');\n                        } catch (error) {\n                            console.warn('Failed to check master playlist for audio:', error);\n                        }\n                    }\n\n                    const children = [\n                        // Video track is always present if we got here (due to filter)\n                        { type: 'video', name: 'Video', progress: 0, status: 'pending' },\n                    ] as DownloadItemProgress['children'];\n\n                    // Only add asset types that exist\n                    if (hasAudio) {\n                        children.push({ type: 'audio', name: 'Audio', progress: 0, status: 'pending' });\n                    }\n                    if (hasSubtitles) {\n                        children.push({ type: 'subtitle', name: 'Subtitles', progress: 0, status: 'pending' });\n                    }\n                    if (hasPreviews) {\n                        children.push({ type: 'preview', name: 'Preview', progress: 0, status: 'pending' });\n                    }\n                    if (hasFonts) {\n                        children.push({ type: 'font', name: 'Fonts', progress: 0, status: 'pending' });\n                    }\n\n                    return {\n                        id: episode.video_id,\n                        title: `${episode.show}${episode.season ? ` S${pad(episode.season,2)}` : ''}${episode.episode ? `E${pad(episode.episode,2)}` : ''} - ${episode.title}`,\n                        image: episode.image,\n                        progress: 0,\n                        status: index === 0 ? 'pending' : 'waiting',\n                        children: children.map(child => ({\n                            ...child,\n                            status: index === 0 ? 'pending' : 'waiting'\n                        }))\n                    };\n                }));\n\n            const tasks = playlist\n                .filter(item => !!item?.file)\n                .map(episode => {\n                    const subtitlePaths = episode.tracks\n                        ?.filter(t => t.kind === 'subtitles' && t.file)\n                        ?.map(t => t.file);\n                    const fontPaths = episode.tracks\n                        ?.filter(t => t.kind === 'fonts' && t.file)\n                        ?.map(t => t.file);\n                    const previewPaths = episode.tracks\n                        ?.filter(t => ['thumbnails', 'sprite'].includes(t.kind) && t.file)\n                        ?.map(t => t.file);\n\n                    return {\n                        mediaId: episode.video_id,\n                        mediaType: 'video' as MediaType,\n                        mediaPath: episode.file,\n                        baseUrl: currentServer.value?.serverBaseUrl || '',\n                        token: user.value?.accessToken || '',\n                        // Only include paths arrays if they have content\n                        ...(subtitlePaths?.length ? { subtitlePaths } : {}),\n                        ...(fontPaths?.length ? { fontPaths } : {}),\n                        ...(previewPaths?.length ? { previewPaths } : {})\n                    };\n                });\n\n            if (!tasks.length) {\n                throw new Error('No valid files to download');\n            }\n\n            totalItems.value = tasks.length;\n            console.log('Starting download with tasks:', tasks);\n            \n            await new Promise((resolve, reject) => {\n                worker = new Worker(\n                    new URL('./downloadWorker', import.meta.url),\n                    { type: 'module' }\n                );\n\n                worker.onerror = (err) => {\n                    console.error('Worker error:', err);\n                    reject(err);\n                };\n\n                worker.onmessage = (e) => {\n                    console.log('Worker message:', e.data);\n                    // Handle paused error message specifically\n                    if (e.data.type === 'error' && e.data.error === 'paused') {\n                        // Don't treat pause messages as errors\n                        return;\n                    }\n                    \n                    const { \n                        type: msgType, \n                        progress: overallProgress,\n                        itemProgress: itemProg, \n                        assetType, \n                        assetProgress,\n                        itemId,\n                        status,\n                        isNewQuery: workerNewQuery \n                    } = e.data;\n                    \n                    if (msgType === 'progress') {\n                        // Only update progress if this isn't a new query or if it is a new query\n                        if (isNewQuery || !workerNewQuery) {\n                            progress.value = Math.min(overallProgress, 100);\n                        }\n                        itemProgress.value = itemProg;\n\n                        // Update specific item and asset progress\n                        if (itemId) {\n                            const item = downloadQueue.value.find(i => i.id === itemId);\n                            if (item) {\n                                // Update specific asset progress\n                                if (assetType) {\n                                    const asset = item.children.find(c => c.type === assetType);\n                                    if (asset) {\n                                        asset.progress = Math.min(assetProgress, 100);\n                                        asset.status = asset.progress === 100 ? 'completed' : status;\n                                    }\n                                }\n\n                                // Update overall item progress\n                                const completedAssets = item.children.filter(c => c.progress === 100).length;\n                                item.progress = Math.round((completedAssets / item.children.length) * 100);\n                                if (item.progress === 100) {\n                                    item.status = 'completed';\n                                    updateCompletedItems(); // Update completed items count\n                                } else if (status) {\n                                    item.status = status;\n                                }\n                            }\n                        }\n                    } else if (msgType === 'complete') {\n                        updateCompletedItems(); // Ensure completed items count is updated\n                        resolve(true);\n                    } else if (msgType === 'error') {\n                        if (e.data.error === 'paused') {\n                            // Don't treat pause as an error, just resolve with false\n                            resolve(false);\n                        } else {\n                            reject(e.data.error);\n                        }\n                    } else if (msgType === 'status') {\n                        const item = downloadQueue.value.find(i => i.id === e.data.itemId);\n                        if (item && item.status !== 'completed') {  // Don't update completed items\n                            if (item.status !== e.data.status) {\n                                item.status = e.data.status;\n                                item.children.forEach(child => {\n                                    if (child.status !== 'completed') {\n                                        child.status = e.data.status;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                };\n\n                worker.postMessage({ \n                    tasks,\n                    baseUrl: currentServer.value?.serverBaseUrl,\n                    token: user.value?.accessToken,\n                    isNewQuery\n                });\n            });\n\n            return true; // Successfully completed downloads\n\n        } catch (error) {\n            if (error === 'paused') {\n                console.log('Downloads paused');\n                return false; // Paused state is not an error\n            }\n            console.error('Download failed:', error);\n            return false;\n        } finally {\n            if (!isPaused.value) { // Only cleanup if not paused\n                worker?.terminate();\n                isDownloading.value = false;\n            }\n        }\n    }\n\n    return {\n        isDownloading,\n        progress,\n        totalItems,\n        completedItems,\n        itemProgress,\n        downloadQueue,\n        isPaused,\n        downloadPlaylist,\n        pauseDownloads,\n        resumeDownloads,\n        pauseItem,\n        resumeItem,\n        prioritizeItem,\n    };\n}\n","<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { IonPage, IonContent } from '@ionic/vue';\n\nimport { useDownloadManager } from '@/lib/OfflineContentManager/useDownloadManager';\nimport { tmdbImageBaseUrl } from '@/config/config';\nimport DashboardLayout from \"@/Layout/Desktop/DashboardLayout.vue\";\n\nconst { \n  isDownloading, \n  progress, \n  totalItems, \n  completedItems, \n  downloadQueue, \n  isPaused, \n  downloadPlaylist, \n  pauseDownloads, \n  resumeDownloads, \n  pauseItem, \n  resumeItem \n} = useDownloadManager();\n\nconst input = ref('tv/138357');\n\nasync function downloadShow() {\n  await downloadPlaylist('video', input.value);\n}\n\n</script>\n\n<template>\n  <ion-page>\n    <ion-content :fullscreen=\"true\">\n      <DashboardLayout :gridStyle=\"3\" title=\"Profile\">\n      <div class=\"flex flex-col gap-2 p-4 overflow-clip col-span-12\">\n        <h2 class=\"text-lg mb-2\">Download for Offline Viewing</h2>\n\n        <div class=\"flex gap-4 max-h-[80vh] overflow-clip\">\n          <div class=\"w-2/5\">\n            <InputText v-model=\"input\" class=\"w-full text-sm\" />\n            <button @click=\"downloadShow\" :disabled=\"isDownloading\"\n              class=\"bg-primary p-1.5 rounded disabled:opacity-50 mt-2 w-full text-sm\">\n              {{ isDownloading ? 'Downloading...' : 'Download Show' }}\n            </button>\n\n            <div v-if=\"isDownloading || completedItems\" class=\"mt-2 text-xs\">\n              <div class=\"flex justify-between items-center mb-1\">\n                <span>Progress: {{ progress }}% ({{ completedItems }}/{{ totalItems }})</span>\n                <button \n                  @click=\"isPaused ? resumeDownloads() : pauseDownloads()\" \n                  class=\"text-xs px-2 py-0.5 rounded bg-neutral-800\"\n                >\n                  {{ isPaused ? 'Resume All' : 'Pause All' }}\n                </button>\n              </div>\n              <div class=\"w-full bg-neutral-700 rounded h-1.5 mt-1\">\n                <div class=\"bg-primary h-full rounded\" :style=\"`width: ${progress}%`\" />\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"downloadQueue.length\" class=\"flex-1 overflow-y-auto available\">\n            <div class=\"grid gap-2\">\n              <div v-for=\"item in downloadQueue\" :key=\"item.id\"\n                class=\"bg-neutral-900/50 rounded p-4 flex flex-col gap-2\">\n                <div class=\"flex justify-between items-center\">\n                  <div class=\"text-sm font-medium truncate flex items-center gap-2\">\n                    {{ item.title }}\n                    <span v-if=\"item.status === 'downloading'\" class=\"text-2xs text-neutral-400\">(Downloading...)</span>\n                    <span v-else-if=\"item.status === 'waiting'\" class=\"text-2xs text-neutral-400\">(Waiting...)</span>\n                  </div>\n                  <button \n                    v-if=\"item.status !== 'completed'\"\n                    @click=\"item.status === 'downloading' || item.status === 'pending' || item.status === 'waiting' ? pauseItem(item.id) : resumeItem(item.id)\" \n                    class=\"text-2xs px-2 py-0.5 rounded bg-neutral-800\"\n                  >\n                    {{ item.status === 'downloading' || item.status === 'pending' || item.status === 'waiting' ? 'Pause' : 'Resume' }}\n                  </button>\n                </div>\n                <div class=\"flex gap-2\">\n\n                  <div class=\"w-1/4 flex flex-col gap-2\">\n                    <img :src=\"`${tmdbImageBaseUrl}${item.image}`\"\n                      class=\"w-full h-auto aspect-video object-fit my-auto rounded\" />\n                    <!-- <div class=\"w-full bg-neutral-700 rounded h-1.5 mt-1\">\n                      <div class=\"bg-primary h-full rounded\" :style=\"`width: ${item.progress}%`\" />\n                    </div> -->\n                  </div>\n\n                  <div class=\"flex-1 min-w-0\">\n                    <!-- Asset Progress -->\n                    <div class=\"grid grid-cols-1 gap-x-4 gap-y-0.5\">\n                      <div v-for=\"asset in item.children\" :key=\"asset.type\" class=\"text-2xs\">\n                        <div class=\"flex justify-between leading-0\">\n                          <span>{{ asset.name }}</span>\n                          <span>{{ asset.progress }}%</span>\n                        </div>\n                        <div class=\"w-full bg-neutral-700 rounded h-1\">\n                          <div :class=\"{\n                              'bg-blue-500': asset.type === 'video',\n                              'bg-green-500': asset.type === 'audio',\n                              'bg-yellow-500': asset.type === 'subtitle',\n                              'bg-purple-500': asset.type === 'preview',\n                              'bg-pink-500': asset.type === 'font'\n                            }\" class=\"h-full rounded\" :style=\"`width: ${asset.progress}%`\" />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </DashboardLayout>\n    </ion-content>\n  </ion-page>\n</template>\n"],"names":["useDownloadManager","isDownloading","ref","progress","completedItems","totalItems","itemProgress","downloadQueue","isPaused","worker","updateCompletedItems","item","pauseDownloads","child","resumeDownloads","pausedItems","pauseItem","itemId","i","resumeItem","prioritizeItem","downloadPlaylist","type","playlist","serverClient","newItems","currentItems","isNewQuery","id","episode","index","hasSubtitles","_a","t","hasFonts","_b","hasPreviews","_c","hasAudio","_d","currentServer","_e","user","error","children","pad","tasks","subtitlePaths","fontPaths","previewPaths","_f","_g","_h","resolve","reject","err","e","msgType","overallProgress","itemProg","assetType","assetProgress","status","workerNewQuery","asset","c","completedAssets","input","downloadShow"],"mappings":"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"}