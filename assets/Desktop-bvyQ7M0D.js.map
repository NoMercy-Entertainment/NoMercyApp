{"version":3,"file":"Desktop-bvyQ7M0D.js","sources":["../../src/views/Dashboard/System/Users/components/InviteUserModal.vue","../../src/views/Dashboard/System/Users/Desktop.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, PropType, ref } from 'vue';\nimport { useTranslation } from \"i18next-vue\";\n\nimport type { AxiosError } from \"axios\";\nimport type { ServerLibrary } from '@/types/server';\n\nimport apiClient from \"@/lib/clients/apiClient\";\nimport useServerClient from '@/lib/clients/useServerClient';\nimport { currentServer } from '@/store/currentServer';\nimport { queryClient } from '@/config/tanstack-query';\n\nimport Modal from '@/components/Modal.vue';\nimport Button from '@/components/Buttons/Button.vue';\nimport { Nullable } from 'vitest';\n\nconst { t } = useTranslation();\n\nconst props = defineProps({\n  open: {\n    type: Boolean,\n    required: true,\n  },\n  close: {\n    type: Function as PropType<() => any>,\n    required: true,\n  },\n});\n\nconst error = ref(null);\nconst email = ref<Nullable<string>>('');\n\nconst errorBucket = ref<{\n  type: string,\n  place: string;\n  message: string;\n}[]>([]);\n\nconst { data: libraries } = useServerClient<ServerLibrary[]>({\n  path: '/dashboard/libraries',\n});\n\nconst allowedLibraries = ref<ServerLibrary[]>();\n\nconst closeInviteModal = () => {\n  errorBucket.value = [];\n  props.close();\n}\n\nconst validateEmail = (email?: string): boolean => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/u;\n  return re.test(String(email).toLowerCase());\n};\n\nconst inputChange = (field: string) => {\n  errorBucket.value = errorBucket.value.filter(errorBucket => errorBucket.place != field);\n}\n\nconst isValidEmail = computed(() => {\n  return validateEmail(email.value);\n});\n\nconst handleInvite = () => {\n  if (!email.value) {\n    errorBucket.value.push({\n      type: 'error',\n      place: 'email',\n      message: t('Email is required'),\n    });\n    return;\n  }\n\n  if (!validateEmail(email.value)) {\n    errorBucket.value.push({\n      type: 'error',\n      place: 'email',\n      message: t('Invalid email address'),\n    });\n    return;\n  }\n\n  apiClient()\n    .post('server/users', {\n      server_id: currentServer.value?.id,\n      email: email.value,\n      libraries: allowedLibraries.value?.map(l => l.id),\n    })\n    .then(() => {\n      queryClient.invalidateQueries({ queryKey: ['server_users'] });\n\n      email.value = '';\n\n      props.close();\n    })\n    .catch(({ response }: AxiosError<{ status: string, message?: string, exception?: string }>) => {\n      if (response?.status != 200 && response?.data) {\n        errorBucket.value.push({\n          message: response.data.message ?? 'An error occurred',\n          place: 'email',\n          type: response.data.status ?? response.data.exception,\n        });\n      }\n    });\n\n};\n\n</script>\n\n<template>\n  <Modal :open=\"open\" :close=\"closeInviteModal\" title=\"Invite user\">\n\n    <div class=\"flex w-full flex-col justify-start text-left\">\n\n      <p class=\"py-4 text-sm text-auto-10\">\n        {{ $t('Enter the email of the friend you want to invite to your server.') }}<br>\n        {{ $t('We will send this person an email with a link to join the server, if they accept the invitation they will be automatically shown here.') }}\n      </p>\n\n      <div class=\"flex flex-col gap-2 w-full\">\n        <label for=\"email\">Email</label>\n        <InputText id=\"email\" v-model=\"email\" class=\"mb-4\" />\n      </div>\n\n      <div class=\"pointer-events-auto mt-2 w-full flex-col gap-1 card flex justify-center\">\n        <label for=\"libraries\">Allowed libraries</label>\n        <MultiSelect id=\"libraries\" display=\"chip\" label=\"libraries\" placeholder=\"Select libraries\" multiple\n          :options=\"libraries\" optionLabel=\"title\" v-model=\"allowedLibraries\" />\n      </div>\n    </div>\n\n\n    <template v-slot:actions>\n      <Button type=\"button\" id=\"yes\" color=\"theme\" variant=\"contained\" endIcon=\"emailSend\" :disabled=\"!isValidEmail\"\n        @click=\"handleInvite\">\n        {{ $t('Send') }}\n      </button>\n      <Button type=\"button\" id=\"no\" variant=\"text\" @click=\"closeInviteModal\">\n        {{ $t('Cancel') }}\n      </button>\n    </template>\n  </Modal>\n</template>\n","<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { IonPage, IonContent } from '@ionic/vue';\n\nimport useApiClient from '@/lib/clients/useApiClient';\n\nimport DashboardLayout from '@/Layout/Desktop/DashboardLayout.vue';\n\nimport Button from '@/components/Buttons/Button.vue';\nimport UserCard from './components/UserCard.vue';\nimport InviteUserModal from './components/InviteUserModal.vue';\nimport { currentServer } from \"@/store/currentServer\";\nimport {ServerUser} from \"@/types/auth\";\n\nconst inviteModalOpen = ref(false);\n\nconst { data: serverUsers } = useApiClient<ServerUser[]>({\n  path: 'server_users',\n  params: {\n    server_id: currentServer.value?.id,\n  },\n  queryKey: ['server_users'],\n});\n\nconst openInviteModal = () => {\n  inviteModalOpen.value = true;\n  setTimeout(() => {\n    document.querySelector<HTMLInputElement>('#email')?.focus();\n  }, 300);\n}\n\nconst closeInviteModal = () => {\n  inviteModalOpen.value = false;\n}\n</script>\n\n<template>\n  <ion-page>\n    <ion-content :fullscreen=\"true\">\n      <DashboardLayout :gridStyle=\"1\" title=\"Server members\"\n        description=\"Manage your server members and their account permissions here.\">\n        <template v-slot:cta>\n          <Button id=\"invite\" color=\"theme\" startIcon=\"userAdd\" @click=\"openInviteModal\">\n            {{ $t('Invite user') }}\n          </Button>\n        </template>\n\n        <template v-for=\"user in [...serverUsers ?? []]?.sort((a, b) => a.name.localeCompare(b.name))\" :key=\"user.id\">\n          <UserCard :data=\"user\" />\n        </template>\n\n        <InviteUserModal :open=\"inviteModalOpen\" :close=\"closeInviteModal\" />\n      </DashboardLayout>\n    </ion-content>\n  </ion-page>\n</template>\n"],"names":["t","useTranslation","props","__props","ref","email","errorBucket","libraries","useServerClient","allowedLibraries","closeInviteModal","validateEmail","isValidEmail","computed","handleInvite","apiClient","_a","currentServer","_b","l","queryClient","response","inviteModalOpen","serverUsers","useApiClient","openInviteModal"],"mappings":"8nDAgBM,KAAA,CAAE,EAAAA,CAAE,EAAIC,EAAe,EAEvBC,EAAQC,EAWAC,EAAI,IAAI,EAChB,MAAAC,EAAQD,EAAsB,EAAE,EAEhCE,EAAcF,EAIf,EAAE,EAED,CAAE,KAAMG,CAAU,EAAIC,EAAiC,CAC3D,KAAM,sBAAA,CACP,EAEKC,EAAmBL,EAAqB,EAExCM,EAAmB,IAAM,CAC7BJ,EAAY,MAAQ,CAAC,EACrBJ,EAAM,MAAM,CACd,EAEMS,EAAiBN,GACV,yJACD,KAAK,OAAOA,CAAK,EAAE,aAAa,EAOtCO,EAAeC,EAAS,IACrBF,EAAcN,EAAM,KAAK,CACjC,EAEKS,EAAe,IAAM,SACrB,GAAA,CAACT,EAAM,MAAO,CAChBC,EAAY,MAAM,KAAK,CACrB,KAAM,QACN,MAAO,QACP,QAASN,EAAE,mBAAmB,CAAA,CAC/B,EACD,MAAA,CAGF,GAAI,CAACW,EAAcN,EAAM,KAAK,EAAG,CAC/BC,EAAY,MAAM,KAAK,CACrB,KAAM,QACN,MAAO,QACP,QAASN,EAAE,uBAAuB,CAAA,CACnC,EACD,MAAA,CAGQe,EAAA,EACP,KAAK,eAAgB,CACpB,WAAWC,EAAAC,EAAc,QAAd,YAAAD,EAAqB,GAChC,MAAOX,EAAM,MACb,WAAWa,EAAAT,EAAiB,QAAjB,YAAAS,EAAwB,IAAIC,GAAKA,EAAE,GAAE,CACjD,EACA,KAAK,IAAM,CACVC,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAc,EAAG,EAE5Df,EAAM,MAAQ,GAEdH,EAAM,MAAM,CACb,CAAA,EACA,MAAM,CAAC,CAAE,SAAAmB,KAAqF,EACzFA,GAAA,YAAAA,EAAU,SAAU,MAAOA,GAAA,MAAAA,EAAU,OACvCf,EAAY,MAAM,KAAK,CACrB,QAASe,EAAS,KAAK,SAAW,oBAClC,MAAO,QACP,KAAMA,EAAS,KAAK,QAAUA,EAAS,KAAK,SAAA,CAC7C,CACH,CACD,CAEL,gvCC1FM,MAAAC,EAAkBlB,EAAI,EAAK,EAE3B,CAAE,KAAMmB,CAAY,EAAIC,EAA2B,CACvD,KAAM,eACN,OAAQ,CACN,WAAWR,EAAAC,EAAc,QAAd,YAAAD,EAAqB,EAClC,EACA,SAAU,CAAC,cAAc,CAAA,CAC1B,EAEKS,EAAkB,IAAM,CAC5BH,EAAgB,MAAQ,GACxB,WAAW,IAAM,QACNN,EAAA,SAAA,cAAgC,QAAQ,IAAxC,MAAAA,EAA2C,SACnD,GAAG,CACR,EAEMN,EAAmB,IAAM,CAC7BY,EAAgB,MAAQ,EAC1B"}