import{bd as a,bc as t}from"./index-CTarIx2-.js";import"./icons-BW5E66pf.js";import"./vue-ionic-9j_oSDCB.js";import"./vendor-Dgtccx1h.js";import"./rxjs-BCp2L9Rn.js";import"./media-C2AqgyMX.js";import"./api-BBofn2cc.js";import"./swiper-D00Cnjmx.js";import"./music-player-CxG_wAnH.js";import"./primevue-BfjCwqou.js";function i(){return localStorage.getItem("language")||navigator.language.split("-")[0]||"en"}function c(){const e=i(),o=t[e]||t.en;return{id:`sw-update-${Date.now()}`,type:"update",title:o.newVersion,body:o.updateNow,from:"system",read:!1,created_at:Date.now(),updated_at:Date.now(),notify:!0,link:"reload"}}function h(){if(!("serviceWorker"in navigator)){console.log("Service worker not supported");return}console.log("Setting up service worker update detection..."),navigator.serviceWorker.addEventListener("controllerchange",()=>{console.log("Controller changed - new service worker active")}),navigator.serviceWorker.getRegistration().then(e=>{if(!e){console.log("No service worker registration found");return}console.log("Service worker registration found"),r(e),e.waiting&&(console.log("Update already waiting, showing notification"),n()),e.update().catch(o=>{console.log("Manual update check failed:",o)})}).catch(e=>{console.error("Failed to get service worker registration:",e)}),navigator.serviceWorker.ready.then(e=>{console.log("Service worker ready, setting up update detection..."),r(e)}).catch(e=>{console.error("Service worker ready failed:",e)}),document.addEventListener("sw-update-accepted",()=>{console.log("User accepted update, reloading..."),window.location.reload()}),setInterval(()=>{navigator.serviceWorker.getRegistration().then(e=>{e&&(console.log("Checking for updates..."),e.update())}).catch(e=>{console.log("Periodic update check failed:",e)})},6e4)}function r(e){e.addEventListener("updatefound",()=>{console.log("New service worker found!");const o=e.installing;if(!o){console.log("No installing worker found");return}console.log("New worker state:",o.state),o.addEventListener("statechange",()=>{console.log("Service worker state changed to:",o.state),o.state==="installed"&&(navigator.serviceWorker.controller?(console.log("New version installed, showing notification"),n()):console.log("Service worker installed for the first time"))})})}function n(){const e=c();a(e)}export{h as setupServiceWorkerUpdates};
